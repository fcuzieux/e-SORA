import React, { useState, useEffect } from 'react';
import { Tooltip } from '../common/Tooltip';
import { ARCFinalInfo } from '../../types/sora';

interface DeterminationARCFinalProps {
  assessment: ARCFinalInfo;
  onChange: (data: ARCFinalInfo) => void;
}

export function DeterminationARCFinal({ assessment, onChange }: DeterminationARCFinalProps) {
  const [OperationalVolumeLevelState, setOperationalVolumeLevel] = useState<string>(assessment?.OperationalVolumeLevel || 'ARC-a');
  const [AdjacentVolumeLevelState, setAdjacentVolumeLevel] = useState<string>(assessment?.AdjacentVolumeLevel || 'ARC-a');
  const [dataLoaded, setDataLoaded] = useState(false);

  // Load saved data from localStorage only once on component mount
  useEffect(() => {
    const savedData = localStorage.getItem('determinationARCFinal');
    if (savedData) {
      try {
        const parsedData = JSON.parse(savedData);
        setOperationalVolumeLevel(parsedData.OperationalVolumeLevelState || 'ARC-a');
        setAdjacentVolumeLevel(parsedData.AdjacentVolumeLevelState || 'ARC-a');
      } catch (error) {
        console.error('Error loading saved data:', error);
      }
    }
    setDataLoaded(true);
  }, []);

  // Update parent component and save to localStorage when data changes
  useEffect(() => {
    if (!dataLoaded) return;

    const dataToSave = {
      OperationalVolumeLevelState,
      AdjacentVolumeLevelState,
    };

    localStorage.setItem('determinationARCFinal', JSON.stringify(dataToSave));

    const updatedAssessment = {
      OperationalVolumeLevel: OperationalVolumeLevelState,
      AdjacentVolumeLevel: AdjacentVolumeLevelState,
    };

    onChange(updatedAssessment);
  }, [
    dataLoaded,
    OperationalVolumeLevelState,
    AdjacentVolumeLevelState,
    onChange
  ]);

  return (
    <div className="space-y-8">
      <div className="space-y-8">
        <h2 className="text-2xl font-semibold">Niveau de Risque Résiduel</h2>
        <div className="bg-gray-50 p-4 rounded-lg space-y-4">
          <div>
            <Tooltip text="Sélectionnez le niveau de risque résiduel pour l'opération envisagée.">
              <label className="block text-sm font-medium text-gray-700">
                Volume Opérationnel
              </label>
            </Tooltip>
            <select
              value={OperationalVolumeLevelState}
              onChange={(e) => setOperationalVolumeLevel(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="ARC-a">ARC-a</option>
              <option value="ARC-b">ARC-b</option>
              <option value="ARC-c">ARC-c</option>
              <option value="ARC-d">ARC-d</option>
            </select>
          </div>
          <div>
            <Tooltip text="Sélectionnez le niveau de risque résiduel pour le volume adjacent.">
              <label className="block text-sm font-medium text-gray-700">
                Volume Adjacent
              </label>
            </Tooltip>
            <select
              value={AdjacentVolumeLevelState}
              onChange={(e) => setAdjacentVolumeLevel(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="ARC-a">ARC-a</option>
              <option value="ARC-b">ARC-b</option>
              <option value="ARC-c">ARC-c</option>
              <option value="ARC-d">ARC-d</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  );
}
